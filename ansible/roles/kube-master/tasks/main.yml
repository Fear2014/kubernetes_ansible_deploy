- name: 下载 kube-master 二进制
  copy: src={{ base_dir }}/bin/{{ item }} dest=/usr/bin  mode=0755
  with_items:
  - kube-apiserver
  - kube-controller-manager
  - kube-scheduler
  tags: upgrade_k8s

- name: 分发证书相关
  synchronize: src={{ k8s_ssl_dir }}/{{ item }} dest={{ k8s_ssl_dir }}/{{ item }}
  with_items:
  - ca.pem
  - ca-key.pem
  - ca-config.json
  delegate_to: "{{ groups.deploy[0] }}"

- name: 创建 apiserver 证书签名请求
  template: src=server-csr.json.j2 dest={{ k8s_ssl_dir }}/server-csr.json
  tags: change_cert

- name: 创建 kubernetes 证书和私钥
  shell: "cd {{ k8s_ssl_dir }} && cfssl gencert \
        -ca={{ k8s_ssl_dir }}/ca.pem \
        -ca-key={{ k8s_ssl_dir }}/ca-key.pem \
        -config={{ k8s_ssl_dir }}/ca-config.json \
        -profile=kubernetes server-csr.json | cfssljson -bare server"
  tags: change_cert


#创建TLS Bootstrapping Token
- name: 生成  随机密码
  shell:  'TOKEN=`date +%s%N|md5sum|head -c16`; \
        sed -i "s/_token_/$TOKEN/g" {{ base_dir }}/roles/kube-master/defaults/main.yml; \
        echo $TOKEN;'
  connection: local
  register: TMP_PASS
  run_once: true
  tags: restart_master

- name: 设置 auth 随机密码
  set_fact: BASIC_AUTH_PASS="{{ TMP_PASS.stdout }}"
  tags: restart_master
     
- name: 创建 token.csv
  template: src=token.csv.j2 dest={{ k8s_ssl_dir }}/token.csv
  tags: restart_master

# 配置 kube-apiserver的cfg文件
- name: 创建kube-apiserver的cfg文件
  template: src=kube-apiserver.j2 dest=/k8s/kubernetes/cfg/kube-apiserver
  tags: upgrade_k8s, restart_master


- name: 创建kube-controller-manager的cfg文件
  template: src=kube-controller-manager.j2 dest=/k8s/kubernetes/cfg/kube-controller-manager
  tags: upgrade_k8s, restart_master

- name: 创建kube-scheduler的cfg文件
  template: src=kube-scheduler.j2 dest=/k8s/kubernetes/cfg/kube-scheduler
  tags: upgrade_k8s, restart_master



# 配置 kube-apiserver的systemd unit文件
- name: 创建kube-apiserver的systemd unit文件
  template: src=kube-apiserver.service.j2 dest=/etc/systemd/system/kube-apiserver.service
  tags: upgrade_k8s, restart_master


- name: 创建kube-controller-manager的systemd unit文件
  template: src=kube-controller-manager.service.j2 dest=/etc/systemd/system/kube-controller-manager.service
  tags: upgrade_k8s, restart_master

- name: 创建kube-scheduler的systemd unit文件
  template: src=kube-scheduler.service.j2 dest=/etc/systemd/system/kube-scheduler.service
  tags: upgrade_k8s, restart_master

- name: enable master 服务
  shell: systemctl enable kube-apiserver kube-controller-manager kube-scheduler
  ignore_errors: true

- name: 启动 master 服务
  shell: "systemctl daemon-reload && systemctl restart kube-apiserver && \
	systemctl restart kube-controller-manager && systemctl restart kube-scheduler"
  tags: upgrade_k8s, restart_master

- name: 以轮询的方式等待服务同步完成
  shell: "systemctl status kube-apiserver.service|grep Active"
  register: etcd_status
  until: '"running" in etcd_status.stdout'
  retries: 8
  delay: 8
  tags: upgrade_etcd
  
# 绑定kubelet-bootstrap用户绑定到系统集群角色
- name: 创建bootstrap.yml
  copy: src=bootstrap.yml dest=/k8s/kubernetes/yml
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true

- name: kubelet-bootstrap用户绑定到系统集群角色
  shell: "sleep 10 && {{ bin_dir }}/kubectl apply -f /k8s/kubernetes/yml/bootstrap.yml"
  delegate_to: "{{ groups.deploy[0] }}"
  run_once: true
